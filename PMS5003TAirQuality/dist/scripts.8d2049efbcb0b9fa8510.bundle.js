webpackJsonp([4],{3:function(t,r,n){t.exports=n("m4tN")},KF6U:function(t,r){t.exports=function(t){"undefined"!=typeof execScript?execScript(t):eval.call(null,t)}},m4tN:function(t,r,n){n("KF6U")(n("mMcs"))},mMcs:function(t,r){t.exports="// Free to use & distribute under the MIT license\r\n// Wes Johnson (@SterlingWes)\r\n//\r\n// inspired by http://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/\r\n\r\n(function (root, factory) {\r\n    if (typeof exports === 'object') {\r\n        module.exports = factory;\r\n    } else if (typeof define === 'function' && define.amd) {\r\n        define(factory);\r\n    } else {\r\n        root.RColor = factory();\r\n    }\r\n}(this, function () {\r\n\r\n\tvar RColor = function() {\r\n\t\tthis.hue\t\t\t= Math.random(),\r\n\t\tthis.goldenRatio \t= 0.618033988749895;\r\n\t\tthis.hexwidth\t\t= 2;\r\n\t};\r\n\r\n\tRColor.prototype.hsvToRgb = function (h,s,v) {\r\n\t\tvar\th_i\t= Math.floor(h*6),\r\n\t\t\tf \t= h*6 - h_i,\r\n\t\t\tp\t= v * (1-s),\r\n\t\t\tq\t= v * (1-f*s),\r\n\t\t\tt\t= v * (1-(1-f)*s),\r\n\t\t\tr\t= 255,\r\n\t\t\tg\t= 255,\r\n\t\t\tb\t= 255;\r\n\t\tswitch(h_i) {\r\n\t\t\tcase 0:\tr = v, g = t, b = p;\tbreak;\r\n\t\t\tcase 1:\tr = q, g = v, b = p;\tbreak;\r\n\t\t\tcase 2:\tr = p, g = v, b = t;\tbreak;\r\n\t\t\tcase 3:\tr = p, g = q, b = v;\tbreak;\r\n\t\t\tcase 4: r = t, g = p, b = v;\tbreak;\r\n\t\t\tcase 5: r = v, g = p, b = q;\tbreak;\r\n\t\t}\r\n\t\treturn [Math.floor(r*256),Math.floor(g*256),Math.floor(b*256)];\r\n\t};\r\n\t\r\n\tRColor.prototype.padHex = function(str) {\r\n\t\tif(str.length > this.hexwidth) return str;\r\n\t\treturn new Array(this.hexwidth - str.length + 1).join('0') + str;\r\n\t};\r\n\t\r\n\tRColor.prototype.get = function(hex,saturation,value) {\r\n\t\tthis.hue += this.goldenRatio;\r\n\t\tthis.hue %= 1;\r\n\t\tif(typeof saturation !== \"number\")\tsaturation = 0.5;\r\n\t\tif(typeof value !== \"number\")\t\tvalue = 0.95;\r\n\t\tvar rgb = this.hsvToRgb(this.hue,saturation,value);\r\n\t\tif(hex)\r\n\t\t\treturn \"#\" +  this.padHex(rgb[0].toString(16))\r\n\t\t\t\t\t\t+ this.padHex(rgb[1].toString(16))\r\n\t\t\t\t\t\t+ this.padHex(rgb[2].toString(16));\r\n\t\telse \r\n\t\t\treturn rgb;\r\n\t};\r\n\r\n\treturn RColor;\r\n\r\n}));"}},[3]);